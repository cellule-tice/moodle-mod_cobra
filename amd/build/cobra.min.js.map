{"version":3,"file":"cobra.min.js","sources":["../src/cobra.js"],"sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log', 'core/ajax', 'core/templates', 'core/notification'], function($, log, ajax, templates, notification) {\n\n    var jsonparams;\n    var objparams;\n    var glossaryentries;\n    return {\n        initUi: function() {\n\n            if ($('body').hasClass('drawer-open-left')) {\n                $('body').removeClass('drawer-open-left');\n                $('#nav-drawer').attr('aria-hidden', 'true');\n                $('#nav-drawer').addClass('closed');\n                $('button[aria-controls=\"nav-drawer\"]').trigger('click');\n            }\n        },\n\n        initData: function(args) {\n            jsonparams = args;\n            objparams = JSON.parse(jsonparams);\n        },\n\n        modFormTriggers: function() {\n            var langbutton = $('#id_updatelanguage');\n            var langselect = $('#id_language');\n            var corpusorder = $('#id_corpusorder');\n            var collbutton = $('#id_selectcollection');\n            var collselect = $('#id_collection');\n            var textselect = $('#id_text');\n            var textlocalname = $('#id_name');\n\n            langselect.on('change', function() {\n                var lang = langselect.find('option:selected').text();\n                if (lang == 'EN') {\n                    corpusorder.val(objparams.en);\n                } else if (lang == 'NL') {\n                    corpusorder.val(objparams.nl);\n                }\n                langbutton.trigger('click');\n            });\n\n            collselect.on('change', function() {\n                collbutton.trigger('click');\n            });\n\n            textselect.on('change', function() {\n                if (textlocalname.val() == '') {\n                    textlocalname.val($('#id_text :selected').text());\n                }\n            });\n\n        },\n        entryOnClick: function() {\n            $('.lemma').on('click', function() {\n                $('.clicked').removeClass('clicked');\n                $('.emphasize').removeClass('emphasize');\n                var conceptId = $(this).attr('name');\n                $('.lemma[name=' + conceptId + ']').addClass('emphasize');\n                $(this).removeClass('emphasize');\n                $(this).addClass('clicked');\n\n                displayDetails(conceptId, false);\n            });\n            $('.expression').on('click', function() {\n                $('.clicked').removeClass('clicked');\n                $('.emphasize').removeClass('emphasize');\n                var conceptId = $(this).attr('name');\n\n                $('.expression[name=' + conceptId + ']').addClass('emphasize');\n                $(this).prevAll('span.expression').each(function() {\n                    if ($(this).attr('name') == conceptId) {\n                        $(this).removeClass('emphasize');\n                        $(this).addClass('clicked');\n                        return true;\n                    } else {\n                        return false;\n                    }\n                });\n                $(this).nextAll('span.expression').each(function() {\n                    if ($(this).attr('name') == conceptId) {\n                        $(this).removeClass('emphasize');\n                        $(this).addClass('clicked');\n                        return true;\n                    } else {\n                        return false;\n                    }\n                });\n                $(this).removeClass('emphasize');\n                $(this).addClass('clicked');\n                displayDetails(conceptId, true);\n            });\n\n        },\n        concordanceOnClick: function() {\n            $('#details').on('click', '.cc_source', function() {\n                displayFullConcordance($(this));\n            });\n        },\n        textGlossaryActions: function() {\n            // Load personal glossary entries.\n            var promises = ajax.call([{\n                methodname: 'mod_cobra_load_glossary',\n                args: {\n                    textid: objparams.text,\n                    courseid: objparams.course,\n                    userid: objparams.user\n                }\n            }]);\n            promises[0]\n                .done(function(response) {\n                    glossaryentries = response;\n                    updateglossarydisplay();\n                }).fail(notification.exception);\n\n            $('#details').on('click', '.glossaryaddbutton', function() {\n                var lingEntity = $(this).prev().text();\n                var promises = ajax.call([{\n                    methodname: 'mod_cobra_add_to_glossary',\n                    args: {\n                        lingentity: lingEntity,\n                        textid: objparams.text,\n                        course: objparams.course,\n                        userid: objparams.user\n                    }\n                }]);\n\n                promises[0]\n                    .done(function(response) {\n                        // Add new entry to user personal glossary and sort glossary.\n                        glossaryentries.push(response);\n                        glossaryentries.sort(function(a, b) {\n                            if (a.entry.toLowerCase() < b.entry.toLowerCase()) {\n                                return -1;\n                            }\n                            if (a.entry.toLowerCase() > b.entry.toLowerCase()) {\n                                return 1;\n                            }\n                            return 0;\n                        });\n\n                        // Change icon in digest row.\n                        var datafortpl = new Array();\n                        datafortpl.lingentity = lingEntity;\n                        datafortpl.iconclass = 'inglossary';\n                        datafortpl.add = false;\n                        templates.render('mod_cobra/glossaryiconcell', datafortpl).done(function(html) {\n                            $('.digest-row').find('button.glossaryaddbutton').replaceWith(html);\n                        }).fail(notification.exception);\n                        updateglossarydisplay();\n                    }).fail(notification.exception);\n            });\n\n            $('#myglossary').on('click', '.glossaryremovebutton', function() {\n                var lingEntity = $(this).prev().text();\n                var promises = ajax.call([{\n                    methodname: 'mod_cobra_remove_from_glossary',\n                    args: {\n                        lingentity: lingEntity,\n                        course: objparams.course,\n                        userid: objparams.user\n                    }\n                }]);\n\n                promises[0]\n                    .done(function(response) {\n                        // Remove entry from displayed glossary and refresh view.\n                        glossaryentries.forEach(function(result, index) {\n                            if (parseInt(result.lingentity) === response.lingentity) {\n                                glossaryentries.splice(index, 1);\n                            }\n                        });\n\n                        // Change icon in digest row if deleted entry is displayed in entry details div.\n                        // if ($('#displayOnClic').find('tr:first th:first span').text() == lingEntity) {\n                        if ($('.digest-row').find('span:first').text() == lingEntity) {\n                            var datafortpl = new Array();\n                            datafortpl.lingentity = lingEntity;\n                            datafortpl.iconclass = 'glossaryadd';\n                            datafortpl.add = true;\n\n                            templates.render('mod_cobra/glossaryiconcell', datafortpl).done(function(html) {\n                                $('.digest-row').find('img:first').replaceWith(\n                                    `<button class=\"glossaryaddbutton\">${html}</button>`);\n                            }).fail(notification.exception);\n                        }\n                        updateglossarydisplay();\n                    }).fail(notification.exception);\n            });\n\n        },\n        myGlossaryActions: function() {\n            $('#myglossary').on('click', '.glossaryremove', function() {\n                var lingEntity = $(this).find('span:first').text();\n                var currentElement = $(this);\n                var promises = ajax.call([{\n                    methodname: 'mod_cobra_remove_from_glossary',\n                    args: {\n                        lingentity: lingEntity,\n                        course: objparams.course,\n                        userid: objparams.user\n                    }\n                }]);\n                promises[0]\n                    .done(function(response) {\n                        // Remove entry from displayed glossary and refresh view.\n                        if (response.lingentity == lingEntity) {\n                            if ($(currentElement).hasClass('inDisplay')) {\n                                $(currentElement.parent().remove());\n                            }\n                        }\n                    }).fail(notification.exception);\n            });\n        },\n        demoapikey: function() {\n            $('#requestapikey').on('click', function() {\n                var promises = ajax.call([{\n                    methodname: 'mod_cobra_get_demo_api_key',\n                    args: {\n                    }\n                }]);\n                promises[0]\n                    .done(function(response) {\n                        $('#id_s_mod_cobra_apikey').val(response.apikey);\n\n                    }).fail(notification.exception);\n                $(this).prop('disabled', true);\n            });\n        },\n    };\n\n    /**\n     * Display details of clicked entry.\n     *\n     * @param {Integer} conceptId Identifier of current entry.\n     * @param {bool} isExpression Flag stating whether the current entry is an Expression or a word.\n     */\n    function displayDetails(conceptId, isExpression) {\n        $('#full_concordance').hide();\n\n        var promises = ajax.call([{\n            methodname: 'mod_cobra_get_entry',\n            args: {\n                conceptid: conceptId,\n                isexpr: isExpression,\n                params: jsonparams\n            }\n        }]);\n\n        promises[0]\n            .done(function(response) {\n                if (objparams.examples == 'bilingual') {\n                    response.bilingual = true;\n                }\n                templates.render('mod_cobra/entrydetails', response).done(function(html) {\n                    $('#details').html(html);\n\n                }).fail(notification.exception);\n            }).fail(notification.exception);\n    }\n\n    /**\n     * Display full text of clicked concordance.\n     *\n     * @param {jQuery} quickindexitem the html element containing the shortened concordance.\n     */\n    function displayFullConcordance(quickindexitem) {\n        var fullConcordanceDiv = $('#full_concordance');\n        var idConcordance = quickindexitem.attr('name');\n\n        var promises = ajax.call([{\n            methodname: 'mod_cobra_get_full_concordance',\n            args: {\n                idconcordance: idConcordance\n            }\n        }]);\n\n        promises[0]\n            .done(function(response) {\n\n                if (objparams.examples == 'bilingual') {\n                    response.bilingual = true;\n                }\n                templates.render('mod_cobra/fullconcordance', response).done(function(html) {\n                    fullConcordanceDiv.html(html);\n                    fullConcordanceDiv.removeClass();\n                    fullConcordanceDiv.addClass(response.type);\n                    fullConcordanceDiv.show();\n                }).fail(notification.exception);\n            }).fail(notification.exception);\n    }\n\n    /**\n     * Dynamically refresh personal glossary content.\n     */\n    function updateglossarydisplay() {\n        var datafortpl = new Array();\n        datafortpl.entries = glossaryentries;\n        datafortpl.cmid = objparams.cmid;\n        datafortpl.course = objparams.course;\n        templates.render('mod_cobra/intextglossary', datafortpl).done(function(html) {\n            $('#glossary').replaceWith(html);\n            // Adapt glossary height to text height.\n            $('#glossary').css('height', $('#cobratext').css('height'));\n\n        }).fail(notification.exception);\n    }\n});\n/* jshint ignore:end */\n"],"names":["define","$","log","ajax","templates","notification","jsonparams","objparams","glossaryentries","initUi","hasClass","removeClass","attr","addClass","trigger","initData","args","JSON","parse","modFormTriggers","langbutton","langselect","corpusorder","collbutton","collselect","textselect","textlocalname","on","lang","find","text","val","en","nl","entryOnClick","conceptId","this","displayDetails","prevAll","each","nextAll","concordanceOnClick","quickindexitem","fullConcordanceDiv","idConcordance","call","methodname","idconcordance","done","response","examples","bilingual","render","html","type","show","fail","exception","textGlossaryActions","textid","courseid","course","userid","user","updateglossarydisplay","lingEntity","prev","lingentity","push","sort","a","b","entry","toLowerCase","datafortpl","Array","iconclass","add","replaceWith","forEach","result","index","parseInt","splice","myGlossaryActions","currentElement","parent","remove","demoapikey","apikey","prop","isExpression","hide","conceptid","isexpr","params","entries","cmid","css"],"mappings":"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"}